package work;
import java.*;
import java.awt.Color;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.*;
import static javax.swing.UIManager.get;
public class Work extends JFrame  
{
    public static void main(String[] args) 
    {
        new Work();
    }
    public Work()
    {
        initComponents();
    }
   public void initComponents() 
    {   
        this.setSize(1100, 1100);
        this.setBackground(Color.darkGray);
        this.setResizable(false);
        this.setDefaultCloseOperation(3);
        this.setVisible(true);  
        this.addMouseListener(new MouseListener()
        {
            @Override
            public void mouseClicked(MouseEvent me) 
            {
            }
int counter=0;
int count=0;
int wybranyGracz;
int przeciwnik;
            @Override
            public void mousePressed(MouseEvent me) 
            {
                 if(nowaGra.getNumerRuchu()%2==1)
                {
                wybranyGracz=1;
                przeciwnik=2;
                }
                if(nowaGra.getNumerRuchu()%2==0)
                {
                    przeciwnik=1;
                    wybranyGracz=2;
                }
                   
                   for(int i = 1;i<17;i++)
                {  
                   if(gracz.get(wybranyGracz).get(i).czyZaznaczony()==1)
                   {
                       if(prezKtoregoGraczaZajete(getCol(me.getX()),getRow(me.getY()))==0 && czyPoprawnyRuch(i,me.getX(),me.getY(),wybranyGracz) && !(getCol(me.getX())==gracz.get(wybranyGracz).get(i).getX() && getCol(me.getY())==gracz.get(wybranyGracz).get(i).getY()))
                       {
                            System.out.println("ok");
                            gracz.get(wybranyGracz).get(i).setXY(getCol(me.getX()), getRow(me.getY()));
                            gracz.get(wybranyGracz).get(i).setCzyWykonacRuch(1);
                            gracz.get(wybranyGracz).get(i).setCzyZaznaczony(0);
                            nowaGra.setNumerRuchu(nowaGra.getNumerRuchu()+1);
                       }
                            System.out.println(prezKtoregoGraczaZajete(getCol(me.getX()),getRow(me.getY()))==przeciwnik);
                            System.out.println(czyPoprawnyRuch(i,me.getX(),me.getY(),wybranyGracz)); if(prezKtoregoGraczaZajete(getCol(me.getX()),getRow(me.getY()))==przeciwnik && czyPoprawnyRuch(i,me.getX(),me.getY(),wybranyGracz))
                       {
                            System.out.println("bicie");
                            gracz.get(wybranyGracz).get(i).setXY(getCol(me.getX()), getRow(me.getY()));
                          gracz.get(przeciwnik).get(jakaFiguraLezy(getCol(me.getX()),getRow(me.getY()),przeciwnik)).setCzyIstnieje(1);
                            gracz.get(wybranyGracz).get(i).setCzyWykonacRuch(1);
                            gracz.get(wybranyGracz).get(i).setCzyZaznaczony(0);
                            nowaGra.setNumerRuchu(nowaGra.getNumerRuchu()+1);  
                           gracz.get(przeciwnik).get(jakaFiguraLezy(getCol(me.getX()),getRow(me.getY()),przeciwnik)).setXY(500, 500);
                       }
                    gracz.get(wybranyGracz).get(i).setCzyWykonacRuch(0);
                    gracz.get(wybranyGracz).get(i).setCzyZaznaczony(0);
                   }
                }
                  repaint();
                click.setXY(getWidth(me.getX()), getHeight(me.getY()));
                         for(int i = 1;i<17;i++)
                    {
                        int a = gracz.get(wybranyGracz).get(i).getX();
                        int b = gracz.get(wybranyGracz).get(i).getY();
                       if(!(gracz.get(wybranyGracz).get(i).czyWykonacRuch()==1))
                               {
                                     if(getCol(me.getX())==a && getRow(me.getY())==b)
                                        {
                                             gracz.get(wybranyGracz).get(i).setCzyZaznaczony(1);      
                                        }
                                }
                       else
                       {
                           gracz.get(wybranyGracz).get(i).setCzyWykonacRuch(0);
                       }    
                    }
            }
            @Override
            public void mouseReleased(MouseEvent me) 
            {  
            }
            @Override
            public void mouseEntered(MouseEvent me) 
            {
            }
            @Override
            public void mouseExited(MouseEvent me) 
            {
            }
        }); 
    graczCzarny.put(1, BlackPawn1);
    graczCzarny.put(2, BlackPawn2);
    graczCzarny.put(3, BlackPawn3);
    graczCzarny.put(4, BlackPawn4);
    graczCzarny.put(5, BlackPawn5);
    graczCzarny.put(6, BlackPawn6);
    graczCzarny.put(7, BlackPawn7);
    graczCzarny.put(8, BlackPawn8);
    graczCzarny.put(9, BlackRook1);
    graczCzarny.put(16, BlackRook2);
    graczCzarny.put(13, BlackQueen);
    graczCzarny.put(12, BlackKing);
    graczCzarny.put(11, BlackKBishop1);
    graczCzarny.put(14, BlackKBishop2);
    graczCzarny.put(10, BlackKnight1);
    graczCzarny.put(15, BlackKnight2);
    graczBialy.put(1, WhitePawn1);
    graczBialy.put(2, WhitePawn2);
    graczBialy.put(3, WhitePawn3);
    graczBialy.put(4, WhitePawn4);
    graczBialy.put(5, WhitePawn5);
    graczBialy.put(6, WhitePawn6);
    graczBialy.put(7, WhitePawn7);
    graczBialy.put(8, WhitePawn8);
    graczBialy.put(9, WhiteRook1);
    graczBialy.put(16, WhiteRook2);
    graczBialy.put(13, WhiteQueen);
    graczBialy.put(12, WhiteKing);
    graczBialy.put(11, WhiteKBishop1);
    graczBialy.put(14, WhiteKBishop2);
    graczBialy.put(10, WhiteKnight1);
    graczBialy.put(15, WhiteKnight2);    
    gracz.put(1, graczBialy);
    gracz.put(2, graczCzarny);
    }
  public boolean czyZaznaczone(int i,int numerGracza)
  {
       if(graczCzarny.get(i).getX()==getCol(click.getX())&& graczCzarny.get(i).getY()==getRow(click.getY()))
          {
              czyPrawda=1;
          }
          if(graczBialy.get(i).getX()==getCol(click.getX())&& graczBialy.get(i).getY()==getRow(click.getY()))
          {
              czyPrawda=1;
          }
      if(czyPrawda==0)
        return false;
      else 
          return true; 
  };
  int czyPrawda =0;
    @Override
            public void paint(Graphics g)
            {
                g.setColor(Color.RED);
                g.fillRect(100, 100, 800, 800);
                for(int i=200;i<900;i+=200)
                {
                        for(int j=200;j<900;j+=200)
                        {
                             g.clearRect(i-100, j-100, 100, 100);
                        }
                }
                for(int i=200;i<900;i+=200)
                {
                        for(int j=200;j<900;j+=200)
                        {
                             g.clearRect(i, j, 100, 100);
                        }
                }  
                
                for(int i=1;i<17;i++)
                        {
                            if(graczCzarny.get(i).czyIstnieje()==0)
                            g.drawImage(graczCzarny.get(i).getFace().getImage(),getWidth(graczCzarny.get(i).getX()), getHeight(graczCzarny.get(i).getY()), this);
                        }
                for(int i=1;i<17;i++)
                        {
                            if(graczBialy.get(i).czyIstnieje()==0)
                            g.drawImage(graczBialy.get(i).getFace().getImage(),getWidth(graczBialy.get(i).getX()), getHeight(graczBialy.get(i).getY()), this);
                        }
            }
            Map<Integer, Map<Integer, Tile>> gracz = new TreeMap<>();
            Map<Integer, Tile> graczCzarny = new TreeMap<>();
    Map<Integer, Tile> graczBialy= new TreeMap<>();
    public static Image bishop = new ImageIcon("Black_Bishop.png").getImage();  
    public int getHeight(int numberOfRow)
    {
        return 115+100*(numberOfRow-1);
    }
    public int getWidth(int numberOfCol)
    {
            return 117+100*(numberOfCol-1);
    };
    public int getCol(int width)
    {
        return  width/100;
    }
     public int getRow(int height)
    {
        return  height/100;
    }
    public boolean czyPoprawnyRuch(int numerFiigury , int EndX, int EndY,int numerGracza)
{   
    int X_= getCol(EndX);
    int Y_= getCol(EndY);
        int numerPrzeciwnika = 0;
      if(numerGracza==1)
        numerPrzeciwnika=2;
         if(numerGracza==2)
        numerPrzeciwnika=1;
        if(numerFiigury<9 & numerGracza ==2)
    {
        int x=gracz.get(2).get(numerFiigury).getX();
        int y=gracz.get(2).get(numerFiigury).getY();
       if(Y_==y+1 && (X_==x+1 || X_==x-1) && prezKtoregoGraczaZajete(X_,Y_)==1)
            {
                return true;
            }
        if(X_==gracz.get(2).get(numerFiigury).getX() && Y_-gracz.get(2).get(numerFiigury).getY()==1 && prezKtoregoGraczaZajete(X_,Y_)==0 )
            return true;
        if(gracz.get(2).get(numerFiigury).getY()==2 && X_==gracz.get(2).get(numerFiigury).getX()&& Y_-gracz.get(2).get(numerFiigury).getY()==2  && prezKtoregoGraczaZajete(X_,Y_)==0 )
            return true;
        else
            return false;
    }
    if(numerFiigury<9 & numerGracza ==1)
    {
         int x=gracz.get(1).get(numerFiigury).getX();
        int y=gracz.get(1).get(numerFiigury).getY();
       if(Y_==y-1 && (X_==x+1 || X_==x-1) && prezKtoregoGraczaZajete(X_,Y_)==2)
            {
                return true;
            }
        if(X_==gracz.get(1).get(numerFiigury).getX() && -Y_+gracz.get(1).get(numerFiigury).getY()==1  && prezKtoregoGraczaZajete(X_,Y_)==0 )
            return true;
        if(gracz.get(1).get(numerFiigury).getY()==7 && X_==gracz.get(1).get(numerFiigury).getX()&& -Y_+gracz.get(1).get(numerFiigury).getY()==2 && prezKtoregoGraczaZajete(X_,Y_)==0 )
            return true;
        else
            return false;
    }
    if(numerFiigury==9 || numerFiigury==16)
    {
       if(czyStoiNaDrodze(gracz.get(numerGracza).get(numerFiigury).getX(),gracz.get(numerGracza).get(numerFiigury).getY(),X_,Y_) &&(gracz.get(numerGracza).get(numerFiigury).getX()==X_ || gracz.get(numerGracza).get(numerFiigury).getY()==Y_)&& czyWPlanszy(X_,Y_)  )
           return true;
       else
           return false;
    }
    if(numerFiigury==10 || numerFiigury==15)  
    {
       int X= gracz.get(numerGracza).get(numerFiigury).getX();
       int Y= gracz.get(numerGracza).get(numerFiigury).getY();
       
         if( czyWPlanszy(X_,Y_)  && (((Y==Y_-2 || Y ==Y_+2) && (X==X_-1 || X==X_+1)) || ((X==X_-2 || X ==X_+2) && (Y==Y_-1 || Y==Y_+1))))
         {
             return true;
         }
         else
             return false;
    }
if(numerFiigury ==11 || numerFiigury ==14)
{
    if(czyStoiNaDrodze(gracz.get(numerGracza).get(numerFiigury).getX(),gracz.get(numerGracza).get(numerFiigury).getY(),X_,Y_) && czyWPlanszy(X_,Y_))   
    {
       int X= gracz.get(numerGracza).get(numerFiigury).getX();
       int Y= gracz.get(numerGracza).get(numerFiigury).getY();
       int deltaX=X-X_;
       int deltaY=Y-Y_;
       
      if(!(deltaX==0) && !(deltaY==0) && (deltaX/deltaY==1|| deltaY/deltaX==-1 )&& czyWPlanszy(X_,Y_))
          return true;
          else
          return false;
    }
}    
    if(numerFiigury ==13)
    {   
       int X= gracz.get(numerGracza).get(numerFiigury).getX();
       int Y= gracz.get(numerGracza).get(numerFiigury).getY();
       int deltaX=X-X_;
       int deltaY=Y-Y_;
       if(!(deltaX==0)&& !(deltaY==0))
       {
        if((deltaX/deltaY==1|| deltaX/deltaY==-1) && czyWPlanszy(X_,Y_)  && czyStoiNaDrodze(gracz.get(numerGracza).get(numerFiigury).getX(),gracz.get(numerGracza).get(numerFiigury).getY(),X_,Y_))
            return true;
                    else
            return false;
        }
       if(((deltaX==0) ||(deltaY==0)))
       {
           if(czyStoiNaDrodze(gracz.get(numerGracza).get(numerFiigury).getX(),gracz.get(numerGracza).get(numerFiigury).getY(),X_,Y_))
           {
            {
                if(((gracz.get(numerGracza).get(numerFiigury).getX()==X_ || gracz.get(numerGracza).get(numerFiigury).getY()==Y_))&& czyWPlanszy(X_,Y_))
                    return true;
                   else
                 return false;
            }
           }
       }
       else 
           return false;
    }
    if(numerFiigury ==12)
    {
        int X= gracz.get(numerGracza).get(numerFiigury).getX();
        int Y= gracz.get(numerGracza).get(numerFiigury).getY();
        int deltaX=X-X_;
        int deltaY=Y-Y_;
         if(((deltaX*deltaY==1|| deltaX*deltaY==-1) || (deltaX ==0 && deltaY==1 || deltaY==-1) || (deltaY ==0 && deltaX==1 || deltaX==-1))&& czyWPlanszy(X_,Y_) )
             return true;
         else
             return false;       
    }        
    return false;
};
    public boolean czyWPlanszy(int X, int Y)
    {
        if(0<X && X<9 && 0<Y && Y<9)
            return true;
        else
            return false;
    };
    public boolean czyStoiNaDrodze(int x, int y,int x_,int y_)
    {
        int flaga_ =0;
        int deltaX=x_-x;
        int deltaY=y_-y;
        if(x==x_)
        {
            if(deltaY>0)
            {
                flaga_ =0;
                for(int i=1;i<deltaY;i++)
                {
                    if(!czyWolne(x,y+i))
                        flaga_ =1;
                }
            }
            if(deltaY<0)
            {
                flaga_ =0;
                for(int i=-1;i>deltaY;i--)
                {
                    if(!czyWolne(x,y+i))
                    {
                        flaga_ =1;
                        break;
                    }    
                }     
            }    
        }
        if(y==y_)
        {
            if(deltaX>0)
            {
                flaga_ =0;
                for(int i=1;i<deltaX;i++)
                {
                    if(!czyWolne(x+i,y))
                    {
                        flaga_ =1;
                        break;
                    }    
                }
            }
            if(deltaX<0)
                flaga_ =0;
                for(int i=-1;i>deltaX;i--)
                {
                    if(!czyWolne(x+i,y))
                    {
                        flaga_ =1;
                        break;
                    }
                }
        }
        if(!(y==y_) & !(x==x_))
        {
            if(deltaX>0 && deltaY>0)
            {
                flaga_ =0;
                for(int i=1;i<deltaX;i++)
                {
                    if(!czyWolne(x+i,y+i))
                    {
                        flaga_ =1;
                        break;
                    }    
                }
            } 
            if(deltaX>0 && deltaY<0)
            {
                flaga_ =0;
                for(int i=1;i<deltaX;i++)
                {
                    if(!czyWolne(x+i,y-i))
                    {
                        flaga_ =1;
                        break;
                    }    
                }
            }
             if(deltaX<0 && deltaY>0)
            {
                flaga_ =0;
                for(int i=1;i<deltaY;i++)
                {
                    if(!czyWolne(x-i,y+i))
                    {
                        flaga_ =1;
                        break;
                    }    
                }
            } 
              if(deltaX<0 && deltaY<0)
            {
                flaga_ =0;
                for(int i=1;i<-deltaY;i++)
                {
                    if(!czyWolne(x-i,y-i))
                    {
                        flaga_ =1;
                        break;
                    }    
                }
            } 
        }
        if(flaga_==1)
            return false;
        else
            return true;
    };
     public void czyNaDrodze(int x, int y,int x_,int y_)
    {
        int flaga_ =0;
        int deltaX=x_-x;
        int deltaY=y_-y;
        if(x==x_)
        {
            if(deltaY>0)
            {
                for(int i=1;i<=deltaY;i++)
                {
                    if(!czyWolne(x,y+i))
                        {
                        flaga_ =1;
                        break;
                        }
                }
            }
            if(deltaY<0)
            {
                for(int i=1;i>=deltaY;i--)
                {
                    if(!czyWolne(x,y+i))
                        flaga_ =1;
                }
             }    
        }
     }
    public boolean czyWolne(int x, int y)
    {
       int flaga =0;
       for(int i=1;i<17;i++)
       {  
           if((gracz.get(1).get(i).getX()==x) && (gracz.get(1).get(i).getY()==y))
               flaga =1;
       }
       for(int i=1;i<17;i++)
       {  
           if((gracz.get(2).get(i).getX()==x) && (gracz.get(2).get(i).getY()==y))
               flaga =1;
       }
         if(flaga==0)
               return true;
           else
               return false;  
    };
   public int prezKtoregoGraczaZajete(int x, int y)
    {
        int ktoryGracz=0;
         for(int i=1;i<17;i++)
       {  
           if((gracz.get(2).get(i).getX()==x) && (gracz.get(2).get(i).getY()==y))
               ktoryGracz =2;
       }
         for(int i=1;i<17;i++)
       {  
           if((gracz.get(1).get(i).getX()==x) && (gracz.get(1).get(i).getY()==y))
               ktoryGracz =1;
       }
        return ktoryGracz;
    };
    public int jakaFiguraLezy(int x, int y, int numerGracz)
    {
        int flaga =0;
            for(int i=1;i<17;i++)
            {
           if((gracz.get(numerGracz).get(i).getX()==x) && (gracz.get(numerGracz).get(i).getY()==y))
               flaga = i;
            }
        return flaga;   
    };
    Tile BlackPawn1 = new Tile(1,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);
    Tile BlackPawn2 = new Tile(2,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);
    Tile BlackPawn3 = new Tile(3,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);
    Tile BlackPawn4 = new Tile(4,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);
    Tile BlackPawn5 = new Tile(5,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);
    Tile BlackPawn6 = new Tile(6,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);
    Tile BlackPawn7 = new Tile(7,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);
    Tile BlackPawn8 = new Tile(8,2,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("Black_Pawn.png")),1,0,0);  
    Tile BlackQueen = new Tile(4,1,new Figury("Queen",Toolkit.getDefaultToolkit().getImage("Black_Queen.png")),1,0,0);
    Tile BlackRook1 = new Tile(1,1,new Figury("Rook",Toolkit.getDefaultToolkit().getImage("Black_Rook.png")),1,0,0);
    Tile BlackRook2 = new Tile(8,1,new Figury("Rook",Toolkit.getDefaultToolkit().getImage("Black_Rook.png")),1,0,0);
    Tile BlackKBishop1 = new Tile(3,1,new Figury("Bishop",Toolkit.getDefaultToolkit().getImage("Black_Bishop.png")),1,0,0);
    Tile BlackKBishop2 = new Tile(6,1,new Figury("Bishop",Toolkit.getDefaultToolkit().getImage("Black_Bishop.png")),1,0,0);
    Tile BlackKnight1 = new Tile(2,1,new Figury("Knight",Toolkit.getDefaultToolkit().getImage("Black_Knight.png")),1,0,0);
    Tile BlackKnight2 = new Tile(7,1,new Figury("Knight",Toolkit.getDefaultToolkit().getImage("Black_Knight.png")),1,0,0);
    Tile BlackKing = new Tile(5,1,new Figury("King",Toolkit.getDefaultToolkit().getImage("Black_King.png")),1,0,0);
    Click click=new Click(1,1);
    numerRuchu nowaGra = new numerRuchu(1);
    Tile WhitePawn1 = new Tile(1,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);
    Tile WhitePawn2 = new Tile(2,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);
    Tile WhitePawn3 = new Tile(3,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);
    Tile WhitePawn4 = new Tile(4,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);
    Tile WhitePawn5 = new Tile(5,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);
    Tile WhitePawn6 = new Tile(6,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);
    Tile WhitePawn7= new Tile(7,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);
    Tile WhitePawn8 = new Tile(8,7,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Pawn.png")),1,0,0);  
    Tile WhiteQueen = new Tile(5,8,new Figury("queen",Toolkit.getDefaultToolkit().getImage("White_Queen.png")),1,0,0);
    Tile WhiteRook1 = new Tile(1,8,new Figury("Rook",Toolkit.getDefaultToolkit().getImage("White_Rook.png")),1,0,0);
    Tile WhiteRook2 = new Tile(8,8,new Figury("Rook",Toolkit.getDefaultToolkit().getImage("White_Rook.png")),1,0,0);
    Tile WhiteKBishop1 = new Tile(3,8,new Figury("Bishop",Toolkit.getDefaultToolkit().getImage("White_Bishop.png")),1,0,0);
    Tile WhiteKBishop2 = new Tile(6,8,new Figury("Bishop",Toolkit.getDefaultToolkit().getImage("White_Bishop.png")),1,0,0);
    Tile WhiteKnight1 = new Tile(2,8,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Knight.png")),1,0,0);
    Tile WhiteKnight2 = new Tile(7,8,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_Knight.png")),1,0,0);
    Tile WhiteKing = new Tile(4,8,new Figury("pawn",Toolkit.getDefaultToolkit().getImage("White_King.png")),1,0,0);
int figuaBialego;
int figuaCzarnego;
}
class numerRuchu
{
    private int _numerRuchu;
    public numerRuchu(int numer)
    {
        _numerRuchu=numer;
    }
    public int getNumerRuchu()
    {
        return _numerRuchu;
    }
    
    public void setNumerRuchu(int numer)
    {
         _numerRuchu=numer;
    }
}
class wybranaFigura
{
                private int _x;
                private int _y;
                private int __x;
                private int __y;
                private boolean _czyZaznaczona;
                 public wybranaFigura(int x,int y,int X, int Y,boolean czyZaznaczona )
                {
                      _x=x;
                      _y=y;
                    __x =X;
                     __y=Y;
                     _czyZaznaczona=czyZaznaczona;
                }
                public int getX()
                {
                    return _x;
                }
                    public int getY()
                {
                    return _y;
                }  
                public void    setXY(int X,int Y)
                {
                      __x= X;
                     __y = Y;
                }
                public int getEndX()
                {
                    return __x;
                }
                    public int getEndY()
                {
                    return __y;
                }
                public void    setEndXY(int X, int Y)
                {
                    __x= X;
                     __y = Y;
                }
                 public boolean getCzyZaznaczona()
                {
                    return _czyZaznaczona;
                }
                 public void setCzyZaznaczona(boolean czyZaznaczona)
                {
                     _czyZaznaczona=czyZaznaczona;
                }
}
class Click
{
    private int _x;
    private int _y;
    public Click(int x,int y)
    {
        _x=x;
        _y=y;
    }
    public int getX()
    {
        return _x;
    }
        public int getY()
    {
        return _y;
    }    
    public void    setXY(int x,int y)
    {
          _x= x;
         _y = y;
    }
}
 class Figury
{
    private String _nazwa;  
    private Image _img;
    private int _druzyna;
    public Figury( String nazwa, Image img)
    {
        _nazwa = nazwa;
        _img= img; 
    }
    public Image getImage()
    {
        return _img;
    }
    public String getNazwa()
    {
        return _nazwa;
    }
}
class Tile 
{
    private int _row;   
    private int _col;     
    private Figury _face;  
    private int _czyIstnieje;
    private int _czyOdswiezyc;
    private int _colEnd;
    private int _rowEnd;
    private int _czyWykonacRuch;
    public Tile(int col, int row, Figury face,int czyIstnieje, int czyZaznaczony,int czyWykonacRuch)
    {
        _col = col;
        _row = row;
        _face = face;
    }
      public int czyIstnieje() 
    {
        return _czyIstnieje;
    }
      public int czyZaznaczony() 
    {
        return _czyOdswiezyc;
    }
      public int czyWykonacRuch() 
    {
        return _czyWykonacRuch;
    }
      public void setCzyIstnieje(int czyIstnieje)
              {
                  _czyIstnieje= czyIstnieje;
              };
      public void setCzyZaznaczony(int cyzOdswieyzc)
              {
                  _czyOdswiezyc= cyzOdswieyzc;
              };
      public void setCzyWykonacRuch(int czyWykonacRuch)
              {
                  _czyWykonacRuch= czyWykonacRuch;
              };
    public void setFace(Figury newFace) 
    {
        _face = newFace;
    }
     public Figury getFace() 
    {
        return _face;
    }
    public void setXY(int X, int Y) 
    {
        _col = X;
         _row = Y;
    }
     public int getX() 
    {
        return _col;
    }
    public int getY() 
    {
        return _row;
       
    }  public void setEndXY(int EndX, int EndY) 
    {
        _colEnd = EndX;
         _rowEnd = EndY;
    }
}
